#include "mcc_generated_files/system/system.h"
#include <xc.h>
#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>

// LCD Pins
#define RS LATAbits.LATA0
#define EN LATAbits.LATA1
#define D4 LATAbits.LATA2
#define D5 LATAbits.LATA3
#define D6 LATAbits.LATA4
#define D7 LATAbits.LATA5

// === LCD Funktionen ===
void LCD_Command(uint8_t cmd);
void LCD_Char(char data);
void LCD_String(const char *str);
void LCD_Set_Cursor(uint8_t row, uint8_t col);

void LCD_Init(void) {
    TRISA &= 0b11000000;
    LATA = 0x00;
    __delay_ms(20);
    LCD_Command(0x02);
    LCD_Command(0x28);
    LCD_Command(0x0C);
    LCD_Command(0x06);
    LCD_Command(0x01);
    __delay_ms(2);
}

void LCD_Command(uint8_t cmd) {
    RS = 0;
    D4 = (cmd >> 4) & 1; D5 = (cmd >> 5) & 1; D6 = (cmd >> 6) & 1; D7 = (cmd >> 7) & 1;
    EN = 1; __delay_us(1); EN = 0;
    D4 = (cmd >> 0) & 1; D5 = (cmd >> 1) & 1; D6 = (cmd >> 2) & 1; D7 = (cmd >> 3) & 1;
    EN = 1; __delay_us(1); EN = 0;
    __delay_ms(2);
}

void LCD_Char(char data) {
    RS = 1;
    D4 = (data >> 4) & 1; D5 = (data >> 5) & 1; D6 = (data >> 6) & 1; D7 = (data >> 7) & 1;
    EN = 1; __delay_us(1); EN = 0;
    D4 = (data >> 0) & 1; D5 = (data >> 1) & 1; D6 = (data >> 2) & 1; D7 = (data >> 3) & 1;
    EN = 1; __delay_us(1); EN = 0;
    __delay_ms(2);
}

void LCD_String(const char *str) {
    while (*str) LCD_Char(*str++);
}

void LCD_Set_Cursor(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 1 ? 0x80 : 0xC0) + (col - 1);
    LCD_Command(pos);
}

// === ADC Initialisierung ===
void ADC_Init(void) {
    TRISBbits.TRISB3 = 1;         // RB3 (A0 vom Soundmodul) als Eingang
    ANSELBbits.ANSB3 = 1;         // Analogfunktion aktivieren
    ADCON0 = 0x2C;                // Kanal AN11 (RB3), ADC an
    ADCON1 = 0x00;                // Vref = Vdd/Vss
    ADCON2 = 0xA9;                // Rechtsjustiert, Tacq = 8 TAD, Fosc/8
    ADCON0bits.ADON = 1;          // ADC einschalten
}

uint16_t ADC_Read(void) {
    ADCON0bits.GO = 1;
    while (ADCON0bits.GO);
    return ((uint16_t)ADRESH << 8) | ADRESL;
}

// === Hauptprogramm ===
/*void main(void) {
    SYSTEM_Initialize();          // MCC Initialisierung
    ADC_Init();                   // ADC vorbereiten
    LCD_Init();                   // LCD initialisieren

    TRISBbits.TRISB5 = 1;         // RB5 (D0 vom Soundmodul) als Eingang
    ANSELBbits.ANSB5 = 0;         // Digitalfunktion

    char buffer[17];

    while (1) {
        uint16_t analog = ADC_Read();
        uint8_t digital = PORTBbits.RB5;

        // LCD Zeile 1: Analogwert anzeigen
        LCD_Set_Cursor(1, 1);
        sprintf(buffer, "Analog: %4u", analog);
        LCD_String("                ");
        LCD_Set_Cursor(1, 1);
        LCD_String(buffer);

        // LCD Zeile 2: "LOUD!" wenn Pegel hoch
        LCD_Set_Cursor(2, 1);
        if (digital) {
            LCD_String("LOUD!           ");
        } else {
            LCD_String("                ");
        }

        __delay_ms(300);
    }
}*/

void main(void) {
    SYSTEM_Initialize();
    LCD_Init();
    ADC_Init();

    char buffer[17];

    while (1) {
        uint16_t analog = ADC_Read();  // analoger Pegel von A0

        // Zeile 1: Analogwert anzeigen
        LCD_Set_Cursor(1, 1);
        sprintf(buffer, "Analog: %4u", analog);
        LCD_String("                ");
        LCD_Set_Cursor(1, 1);
        LCD_String(buffer);

        // Zeile 2: Schwellenwert vergleichen
        LCD_Set_Cursor(2, 1);
        if (analog > 1000) {
            LCD_String("LOUD!");
        } else {
            LCD_String("Leise...");
        }

        __delay_ms(300);
    }
}