#include "mcc_generated_files/system/system.h"
#include "mcc_generated_files/i2c_host/i2c_host_interface.h"
#include <xc.h>
#include <stdio.h>
#include <stdbool.h>

// ====== I2C Setup ======
#define I2C_HOST I2C1_Host
#define DS1307_ADDR 0x68 // 7-bit Adresse

uint8_t rtc_buffer[7];

// ====== BCD Umwandlung ======
unsigned char bcd2dec(unsigned char bcd) {
    return (bcd >> 4) * 10 + (bcd & 0x0F);
}

unsigned char dec2bcd(unsigned char dec) {
    return ((dec / 10) << 4) | (dec % 10);
}

// ====== RTC Funktionen ======
bool rtc_set_datetime(uint8_t h, uint8_t m, uint8_t s, uint8_t d, uint8_t mo, uint8_t y) {
    uint8_t data[8];
    data[0] = 0x00;                 // Startadresse
    data[1] = dec2bcd(s) & 0x7F;    // Sekunden, CH-Bit löschen
    data[2] = dec2bcd(m);
    data[3] = dec2bcd(h);
    data[4] = 1;                    // Wochentag = 1
    data[5] = dec2bcd(d);
    data[6] = dec2bcd(mo);
    data[7] = dec2bcd(y);

    return I2C_HOST.Write(DS1307_ADDR, data, 8);
}

bool rtc_available() {
    uint8_t dummy = 0x00;
    return I2C_HOST.Write(DS1307_ADDR, &dummy, 1);
}

void rtc_read_datetime(uint8_t *h, uint8_t *m, uint8_t *s, uint8_t *d, uint8_t *mo, uint8_t *y) {
    uint8_t reg = 0x00;
    I2C_HOST.Write(DS1307_ADDR, &reg, 1);
    I2C_HOST.Read(DS1307_ADDR, rtc_buffer, 7);

    *s  = bcd2dec(rtc_buffer[0] & 0x7F); // CH-Bit maskieren
    *m  = bcd2dec(rtc_buffer[1]);
    *h  = bcd2dec(rtc_buffer[2]);
    *d  = bcd2dec(rtc_buffer[4]);
    *mo = bcd2dec(rtc_buffer[5]);
    *y  = bcd2dec(rtc_buffer[6]);
}

// ====== LCD Setup (RA0–RA5) ======
#define RS LATAbits.LATA0
#define EN LATAbits.LATA1
#define D4 LATAbits.LATA2
#define D5 LATAbits.LATA3
#define D6 LATAbits.LATA4
#define D7 LATAbits.LATA5

void lcd_pulse() {
    EN = 1; __delay_ms(1);
    EN = 0; __delay_ms(1);
}

void lcd_cmd(unsigned char cmd) {
    RS = 0;
    D4 = (cmd >> 4) & 1; D5 = (cmd >> 5) & 1; D6 = (cmd >> 6) & 1; D7 = (cmd >> 7) & 1;
    lcd_pulse();
    D4 = (cmd >> 0) & 1; D5 = (cmd >> 1) & 1; D6 = (cmd >> 2) & 1; D7 = (cmd >> 3) & 1;
    lcd_pulse();
}

void lcd_data(unsigned char data) {
    RS = 1;
    D4 = (data >> 4) & 1; D5 = (data >> 5) & 1; D6 = (data >> 6) & 1; D7 = (data >> 7) & 1;
    lcd_pulse();
    D4 = (data >> 0) & 1; D5 = (data >> 1) & 1; D6 = (data >> 2) & 1; D7 = (data >> 3) & 1;
    lcd_pulse();
}

void lcd_init() {
    TRISA &= 0b11000000; // RA0–RA5 als Ausgang
    LATA = 0x00;
    RS = 0; EN = 0;
    __delay_ms(20);
    lcd_cmd(0x02); lcd_cmd(0x28); lcd_cmd(0x0C); lcd_cmd(0x06); lcd_cmd(0x01);
    __delay_ms(2);
}

void lcd_goto(unsigned char x, unsigned char y) {
    lcd_cmd(0x80 + (y == 1 ? 0x40 : 0x00) + x);
}

void lcd_puts(const char* str) {
    while (*str) lcd_data(*str++);
}

void lcd_print_datetime() {
    uint8_t h, m, s, d, mo, y;
    char line1[17], line2[17];
    rtc_read_datetime(&h, &m, &s, &d, &mo, &y);
    sprintf(line1, "Z: %02u:%02u:%02u", h, m, s);
    sprintf(line2, "D: %02u.%02u.20%02u", d, mo, y);
    lcd_goto(0, 0); lcd_puts("                ");
    lcd_goto(0, 0); lcd_puts(line1);
    lcd_goto(0, 1); lcd_puts("                ");
    lcd_goto(0, 1); lcd_puts(line2);
}

// ====== MAIN ======
void main() {
    SYSTEM_Initialize();
    lcd_init();

    // Taster an RD1
    TRISDbits.TRISD1 = 1;
    ANSELDbits.ANSD1 = 0;

    __delay_ms(500);
    lcd_cmd(0x01);

    if (!rtc_available()) {
        lcd_goto(0, 0); lcd_puts("RTC NICHT DA!");
        while (1);
    }

    while (1) {
        if (PORTDbits.RD1 == 0) {
            lcd_cmd(0x01);
            lcd_goto(0, 0); lcd_puts("SETZE ZEIT...");

            bool success = rtc_set_datetime(14, 32, 0, 30, 5, 25);
            if (!success) {
                lcd_cmd(0x01);
                lcd_goto(0, 0); lcd_puts("I2C WRITE FAIL");
                while (1);
            }

            __delay_ms(500); // debounce
            while (1) {
                lcd_print_datetime();
                __delay_ms(1000);
            }
        } else {
            lcd_goto(0, 0);
            lcd_puts("Warte auf Taster");
        }

        __delay_ms(300);
    }
}
