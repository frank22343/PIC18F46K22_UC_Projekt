// === Projekt: MPU6050 mit PIC18F46K22 und LCD ===
#include "mcc_generated_files/system/system.h"
#include "mcc_generated_files/i2c_host/mssp1.h"
#include <xc.h>
#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>

// === I2C Adresse MPU6050 ===
#define MPU6050_ADDR 0x68

// === LCD Pins (RA0 bis RA5) ===
#define RS LATAbits.LATA0
#define EN LATAbits.LATA1
#define D4 LATAbits.LATA2
#define D5 LATAbits.LATA3
#define D6 LATAbits.LATA4
#define D7 LATAbits.LATA5

// === Globale Variable ===
volatile bool motion_detected = false;

// === LCD Funktionen ===
void LCD_Command(uint8_t cmd);
void LCD_Char(char data);
void LCD_String(const char *str);
void LCD_Set_Cursor(uint8_t row, uint8_t col);

void LCD_Init(void) {
    TRISA &= 0b11000000;  // RA0â€“RA5 als Ausgang
    LATA = 0x00;
    __delay_ms(20);
    LCD_Command(0x02); // 4-bit Mode
    LCD_Command(0x28); // 2 lines, 5x7 matrix
    LCD_Command(0x0C); // Display on, cursor off
    LCD_Command(0x06); // Increment cursor
    LCD_Command(0x01); // Clear display
    __delay_ms(2);
}

void LCD_Command(uint8_t cmd) {
    RS = 0;
    D4 = (cmd >> 4) & 1; D5 = (cmd >> 5) & 1; D6 = (cmd >> 6) & 1; D7 = (cmd >> 7) & 1;
    EN = 1; __delay_us(1); EN = 0;
    D4 = (cmd >> 0) & 1; D5 = (cmd >> 1) & 1; D6 = (cmd >> 2) & 1; D7 = (cmd >> 3) & 1;
    EN = 1; __delay_us(1); EN = 0;
    __delay_ms(2);
}

void LCD_Char(char data) {
    RS = 1;
    D4 = (data >> 4) & 1; D5 = (data >> 5) & 1; D6 = (data >> 6) & 1; D7 = (data >> 7) & 1;
    EN = 1; __delay_us(1); EN = 0;
    D4 = (data >> 0) & 1; D5 = (data >> 1) & 1; D6 = (data >> 2) & 1; D7 = (data >> 3) & 1;
    EN = 1; __delay_us(1); EN = 0;
    __delay_ms(2);
}

void LCD_String(const char *str) {
    while (*str) LCD_Char(*str++);
}

void LCD_Set_Cursor(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 1 ? 0x80 : 0xC0) + (col - 1);
    LCD_Command(pos);
}

// === MPU6050 Initialisierung ===
void MPU6050_Init(void) {
    uint8_t buf[2];

    buf[0] = 0x6B; // PWR_MGMT_1
    buf[1] = 0x00; // Wake up
    I2C1_Write(MPU6050_ADDR, buf, 2);

    buf[0] = 0x38; // INT_ENABLE
    buf[1] = 0x40; // Enable motion interrupt
    I2C1_Write(MPU6050_ADDR, buf, 2);
}

// === Beschleunigung lesen ===
bool MPU6050_ReadAccel(int16_t *ax, int16_t *ay, int16_t *az) {
    uint8_t reg = 0x3B;
    uint8_t buf[6];

    if (!I2C1_Write(MPU6050_ADDR, &reg, 1)) return false;
    if (!I2C1_Read(MPU6050_ADDR, buf, 6)) return false;

    *ax = (buf[0] << 8) | buf[1];
    *ay = (buf[2] << 8) | buf[3];
    *az = (buf[4] << 8) | buf[5];
    return true;
}

// === Interrupt Callback ===
void MPU6050_InterruptHandler(void) {
    motion_detected = true;
}

// === Hauptprogramm ===
void main(void) {
    SYSTEM_Initialize();
    LCD_Init();
    MPU6050_Init();

    INT0_SetInterruptHandler(MPU6050_InterruptHandler);

    int16_t ax, ay, az;
    char buffer[17];

    LCD_Set_Cursor(1, 1);
    LCD_String("MPU6050 Ready");
    __delay_ms(1000);

    while (1) {
        if (MPU6050_ReadAccel(&ax, &ay, &az)) {
            float ax_g = ax / 16384.0f;
            float ay_g = ay / 16384.0f;
            float az_g = az / 16384.0f;

            LCD_Set_Cursor(1, 1);
            sprintf(buffer, "X:%.2f", ax_g);
            LCD_String("                "); // Clear line
            LCD_Set_Cursor(1, 1);
            LCD_String(buffer);

            LCD_Set_Cursor(2, 1);
            sprintf(buffer, "Y:%.2f Z:%.2f", ay_g, az_g);
            LCD_String("                "); // Clear line
            LCD_Set_Cursor(2, 1);
            LCD_String(buffer);
        }

        if (motion_detected) {
            LCD_Set_Cursor(1, 1);
            LCD_String("Motion Detected ");
            motion_detected = false;
            __delay_ms(1000);
        }

        __delay_ms(500);
    }
}
